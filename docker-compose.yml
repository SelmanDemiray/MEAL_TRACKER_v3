version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: mealprep-postgres
    environment:
      POSTGRES_DB: mealprep
      POSTGRES_USER: mealprep
      POSTGRES_PASSWORD: mealprep_secure_2024
    ports:
      - "35432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mealprep"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: mealprep-redis
    ports:
      - "36379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Services
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: mealprep-api-gateway
    ports:
      - "38080:8080"
    environment:
      - DATABASE_URL=postgresql://mealprep:mealprep_secure_2024@postgres:5432/mealprep
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  nutrition-service:
    build:
      context: ./services/nutrition-service
      dockerfile: Dockerfile
    container_name: mealprep-nutrition-service
    ports:
      - "38081:8081"
    environment:
      - DATABASE_URL=postgresql://mealprep:mealprep_secure_2024@postgres:5432/mealprep
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: mealprep-analytics-service
    ports:
      - "38082:8082"
    environment:
      - DATABASE_URL=postgresql://mealprep:mealprep_secure_2024@postgres:5432/mealprep
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mealprep-frontend
    ports:
      - "33000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:38080
    depends_on:
      - api-gateway
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mealprep-prometheus
    ports:
      - "39090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mealprep-grafana
    ports:
      - "33001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: mealprep-network
