
services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mealtracker_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mealtracker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mealtracker_password}
      POSTGRES_DB: ${POSTGRES_DB:-mealtracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "0.0.0.0:35432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mealtracker"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mealtracker_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mealtracker_redis
    ports:
      - "0.0.0.0:36379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mealtracker_network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: mealtracker_api_gateway
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-mealtracker}:${POSTGRES_PASSWORD:-mealtracker_password}@postgres:5432/${POSTGRES_DB:-mealtracker}
      - REDIS_URL=redis://redis:6379
      - NUTRITION_SERVICE_URL=http://nutrition-service:8081
      - ANALYTICS_SERVICE_URL=http://analytics-service:8082
      - JWT_SECRET=${JWT_SECRET:-super_secret_key_for_development}
    ports:
      - "0.0.0.0:38080:8080"
    depends_on:
      - postgres
      - redis
      - nutrition-service
      - analytics-service
    networks:
      - mealtracker_network
    restart: unless-stopped

  # Nutrition Service (AI-Powered)
  nutrition-service:
    build:
      context: ./services/nutrition-service
      dockerfile: Dockerfile
    container_name: mealtracker_nutrition_service
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-mealtracker}:${POSTGRES_PASSWORD:-mealtracker_password}@postgres:5432/${POSTGRES_DB:-mealtracker}
      - REDIS_URL=redis://redis:6379
      - API_KEYS=${NUTRITION_API_KEYS:-}
    ports:
      - "0.0.0.0:38081:8081"
    depends_on:
      - postgres
      - redis
    networks:
      - mealtracker_network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: mealtracker_analytics_service
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-mealtracker}:${POSTGRES_PASSWORD:-mealtracker_password}@postgres:5432/${POSTGRES_DB:-mealtracker}
      - REDIS_URL=redis://redis:6379
    ports:
      - "0.0.0.0:38082:8082"
    depends_on:
      - postgres
      - redis
    networks:
      - mealtracker_network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mealtracker_frontend
    ports:
      - "0.0.0.0:3000:3000"
    depends_on:
      - api-gateway
    networks:
      - mealtracker_network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: mealtracker_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "0.0.0.0:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mealtracker_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mealtracker_grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "0.0.0.0:3001:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mealtracker_network
    restart: unless-stopped

networks:
  mealtracker_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
